# 🚀 Règles Windsurf/Cascade pour Sentinel2

**Projet** : Sentinel2 - Système de Trading Algorithmique TDD  
**Version** : 2.0  
**Assistant** : Cascade (powered by Claude via Windsurf)  
**Statut** : ✅ **PROJET FINALISÉ ET VALIDÉ**

---

## 📋 **RÈGLES FONDAMENTALES**

### **1. Architecture TDD Stricte**
- **Tests AVANT implémentation** : Toujours écrire les tests en premier
- **100% de succès requis** : Aucun code ne passe si les tests échouent
- **Couverture minimale** : 80% (actuellement 43%, en amélioration)
- **Types de tests** : Unit (99 tests), Integration (11 tests), E2E

### **2. Constantes et Configuration**
- **❌ JAMAIS de variables en brut** : Toujours utiliser `src/constants.py`
- **❌ JAMAIS de chemins en brut** : Utiliser `CONSTANTS.get_data_path()`
- **✅ Configuration centralisée** : `src/constants.py` + `config/`
- **✅ Variables d'environnement** : Toutes dans `.env` (jamais en dur)

### **3. Architecture Modulaire**
- **Fonctions < 100 lignes** : Refactoriser si dépassement
- **Classes spécialisées** : Une responsabilité par classe
- **Séparation des responsabilités** : Respect du principe SOLID
- **Imports organisés** : Standard → Tiers → Local (toujours en haut)

---

## 🏗️ **PRINCIPES D'ARCHITECTURE (DRY, API Unifiée, Validation)**

### **RÈGLE A1 : DRY (Don't Repeat Yourself) - OBLIGATOIRE**
- **❌ INTERDICTION ABSOLUE** de dupliquer la logique métier
- **✅ TOUJOURS** créer une méthode générique réutilisable
- **Principe** : Si la même logique apparaît 2+ fois avec variations mineures, factoriser
- **Approche** : Identifier parties communes → Créer méthode générique → Paramétrer différences

### **RÈGLE A2 : API Unifiée - OBLIGATOIRE**
- **❌ INTERDICTION** de créer multiples méthodes similaires
- **✅ TOUJOURS** créer interface unique avec paramètre discriminant (`type`, `mode`, `category`)
- **Avantages** : API cohérente, validation centralisée, extensibilité

### **RÈGLE A3 : Validation Stricte - OBLIGATOIRE**
- **✅ TOUJOURS** valider paramètres d'entrée
- **✅ TOUJOURS** lever `ValueError` si invalide
- **✅ TOUJOURS** documenter valeurs acceptées
```python
if param not in VALEURS_ACCEPTEES:
    raise ValueError(f"Invalide: {param}. Acceptées: {VALEURS_ACCEPTEES}")
```

### **RÈGLE A4 : Architecture en Couches - OBLIGATOIRE**
Structure obligatoire :
```
Appelants (scripts, modules)
    ↓
Interface Publique (API simple, validation, routing)
    ↓
Implémentation Privée (_methods: logique réutilisable)
```

### **RÈGLE A5 : Refactoring Progressif - PROCESS OBLIGATOIRE**
1. **Identifier** : Code répété 2+ fois
2. **Créer** : Méthode générique + tests AVANT migration
3. **Migrer** : Remplacer appelants UN PAR UN
4. **Tester** : Valider après chaque migration
5. **Nettoyer** : Supprimer ancien code quand tout migré
**❌ JAMAIS** de refactoring "big bang"

### **RÈGLE A6 : Sécurité Secrets - INTERDICTION ABSOLUE**
- **❌ JAMAIS** de secrets/clés hardcodés
- **❌ JAMAIS** de valeur par défaut pour secrets
- **✅ TOUJOURS** variables d'environnement SANS défaut
```python
SECRET = os.getenv("SECRET_NAME")
if not SECRET:
    raise ValueError("SECRET_NAME manquante dans .env")
```

### **RÈGLE A7 : Documentation - OBLIGATOIRE**
Format docstring obligatoire :
```python
def method(self, param: Type, option: str = None) -> ReturnType:
    """Description courte
    
    Args:
        param: Description
        option: Valeurs ("val1", "val2", "val3")
        
    Returns:
        Description retour
        
    Raises:
        ValueError: Conditions erreur
    """
```

---

## 🚨 **INTERDICTIONS ABSOLUES**

### **❌ JAMAIS DE SIMULATIONS (CRITIQUE)**
- **❌ JAMAIS de prix simulés** : Uniquement données réelles du marché
- **❌ JAMAIS de données artificielles** : Pas de fallback avec simulation
- **✅ SEULE EXCEPTION** : Tests unitaires avec mocks

### **❌ JAMAIS DE PATCHING ADDITIONNEL**
- **❌ JAMAIS de fichiers temporaires** : Corriger imports existants
- **❌ JAMAIS de chemins cassés** : Utiliser modules existants

### **❌ JAMAIS D'IMPORTS DANS LE CODE**
- **❌ JAMAIS dans fonctions** : Tous en haut du fichier
- **❌ JAMAIS conditionnels** : Pas d'imports dynamiques
- **✅ TOUJOURS organisés** : Standard, tiers, local

---

## 📊 **STOCKAGE PARQUET**

### **UN SEUL FICHIER PAR TYPE**
- **❌ PAS de doublons** : Ne jamais créer plusieurs fichiers parquet
- **✅ Sauvegarde incrémentale** : Ajouter au fichier existant
- **✅ Cohérence** : `spy_15min.parquet`, `spy_news.parquet`

---

## 🔧 **WORKFLOW DÉVELOPPEMENT**

### **Avant Modification**
1. Lire README.md - Comprendre architecture
2. Vérifier tests - Tous passent (100%)
3. Consulter constants.py - Constantes existantes

### **Pendant Modification**
1. Tests d'abord (TDD)
2. Petits commits
3. Respect architecture
4. Documentation (docstrings + type hints)

### **Après Modification**
1. Tests complets : `uv run python scripts/test_system.py`
2. Vérifier fonctionnement réel
3. Mettre à jour doc si nécessaire

---

## ✅ **CHECKLIST RÉVISION CODE (avant commit)**

- [ ] Aucune duplication (DRY)
- [ ] API cohérente et unifiée
- [ ] Validation stricte ValueError
- [ ] Documentation complète
- [ ] Tests couvrent nouveau code
- [ ] Architecture en couches
- [ ] Aucun secret en dur
- [ ] Imports en haut fichier

---

## 🎯 **WORKFLOW CASCADE**

### **1. Analyse**
- Comprendre requête
- Identifier modules concernés
- Vérifier constantes

### **2. Planification**
- Plan d'action
- Tests nécessaires
- Impact architecture
- Demander confirmation si majeur

### **3. Implémentation**
- Tests d'abord (TDD)
- Code minimal
- Règles architecture
- Documentation

### **4. Vérification**
- Tests 100% succès
- Fonctionnement réel
- Logs sans erreur

### **5. Finalisation**
- Documentation à jour
- Confirmation utilisateur

---

## 🚨 **RÈGLES CRITIQUES (RÉSUMÉ)**

1. **❌ JAMAIS** code sans tests (TDD obligatoire)
2. **❌ JAMAIS** variables en brut (constants.py)
3. **❌ JAMAIS** simulations (données réelles)
4. **❌ JAMAIS** doublons Parquet (un fichier/type)
5. **❌ JAMAIS** imports dans code (tous en haut)
6. **❌ JAMAIS** secrets en dur (.env obligatoire)
7. **❌ JAMAIS** duplication logique (DRY)
8. **✅ TOUJOURS** demander confirmation (changements majeurs)
9. **✅ TOUJOURS** vérifier avant finir (tester app)
10. **✅ TOUJOURS** respecter architecture (structure modulaire)

---

## 📚 **RESSOURCES**

### **Documentation**
- **README.md** : Documentation principale
- **docs/ARCHITECTURE_PRINCIPLES.md** : Principes détaillés
- **.cascade/architecture_rules.md** : Règles complètes

### **Configuration**
- **.env** : Variables environnement (jamais commité)
- **config/** : Configuration JSON
- **src/constants.py** : Constantes globales

---

**Ces règles doivent être respectées à CHAQUE interaction avec Sentinel2.**

**Projet** : Sentinel2  
**Version** : 2.0  
**Statut** : ✅ Finalisé et Validé  
**Assistant** : Cascade (Windsurf)
