# 🚀 RÈGLES CURSOR - SENTINEL2

Tu es un assistant IA spécialisé dans le développement du projet **Sentinel2 - Système de Trading Algorithmique TDD**.

## 📋 CONTEXTE DU PROJET

**Sentinel2** est un système de trading algorithmique TDD (Test-Driven Development) avec une interface Streamlit moderne. Le projet est **finalisé et validé** avec 100% de tests réussis.

## 🎯 RÈGLES FONDAMENTALES (NON NÉGOCIABLES)

### **TDD OBLIGATOIRE**
- **Tests AVANT implémentation** : Toujours commencer par les tests
- **Couverture minimale** : 80% sur les services critiques
- **Tests unitaires** : `tests/unit/` pour chaque service
- **Tests d'intégration** : `tests/integration/` pour l'assemblage

### **CONFIGURATION CENTRALISÉE**
- **❌ JAMAIS de variables en brut** : Toujours utiliser `src/constants.py`
- **❌ JAMAIS de chemins en brut** : Utiliser `CONSTANTS.get_data_path()`
- **✅ Configuration par environnement** : `.env` + `config/`

### **ARCHITECTURE MODULAIRE**
- **Fonctions < 100 lignes** : Découper si nécessaire
- **Classes spécialisées** : Une responsabilité par classe
- **Type hints partout** : Annotations de types obligatoires
- **Imports organisés** : Standard, tiers, local

## 🏗️ STRUCTURE À RESPECTER

```
src/
├── core/                 # Modules fondamentaux
├── data/                 # Gestion des données
├── gui/                  # Interface Streamlit
│   ├── pages/            # Pages de l'interface
│   ├── services/         # Services GUI
│   ├── components/       # Composants réutilisables
│   └── config/           # Configuration GUI
├── models/               # Modèles ML
├── notebooks/            # Notebooks Jupyter
└── tests/                # Tests TDD complets
```

## 📊 RÈGLES DE DONNÉES (CRITIQUES)

### **Stratégie Parquet**
- **❌ JAMAIS de doublons** : Un seul fichier par type de données
- **✅ Sauvegarde incrémentale** : Ajouter les nouvelles données au fichier existant
- **✅ Cohérence** : Garder l'historique complet dans un seul fichier

## 🚀 RÈGLES STREAMLIT

### **Bonnes Pratiques Officielles**
- **Un seul point d'entrée** : `main.py` avec fonction `main()`
- **CSS centralisé** : `assets/custom.css` injecté une seule fois
- **Configuration centralisée** : `config/settings.py`
- **Séparation stricte** : Pages UI, Services métier, Tests unitaires

### **Performance**
- **Cache contrôlé** : `@st.cache_data` et `@st.cache_resource` avec TTL
- **Chargement paresseux** : Données chargées uniquement si nécessaire
- **Responsive design** : Adaptation mobile et desktop

## 🧪 RÈGLES DE TEST

### **Structure**
```
tests/
├── unit/           # Tests unitaires rapides
├── integration/    # Tests d'intégration
└── e2e/           # Tests end-to-end
```

### **Commandes**
```bash
# Tests unitaires
uv run pytest tests/unit/ -v

# Tests complets
uv run python scripts/test_system.py
```

## 📈 MÉTRIQUES DE PERFORMANCE

- **Temps de chargement** : < 3 secondes pour l'interface
- **Mémoire** : < 500MB pour l'application
- **Cache hit rate** : > 80%
- **Tests** : < 30 secondes pour la suite complète
- **Couverture de code** : 80% minimum

## 🎯 COMPORTEMENT ATTENDU

### **Pour une nouvelle fonctionnalité**
1. **Créer les tests d'abord** (TDD)
2. **Utiliser `src/constants.py`** pour toutes les valeurs
3. **Respecter l'architecture modulaire** (fonctions < 100 lignes)
4. **Documenter avec docstrings**
5. **Respecter la stratégie Parquet** (un seul fichier par type)
6. **Utiliser les bonnes pratiques Streamlit**

### **Pour une modification**
1. **Vérifier que les tests existants passent**
2. **Modifier le code en respectant l'architecture**
3. **Mettre à jour les tests si nécessaire**
4. **Vérifier la performance**
5. **Mettre à jour la documentation**

### **Pour un debug**
1. **Analyser les logs dans `data/logs/`**
2. **Vérifier la configuration dans `src/constants.py`**
3. **Tester les services individuellement**
4. **Respecter l'architecture modulaire**
5. **Documenter la solution**

## 🔧 COMMANDES UTILES

### **Lancement**
```bash
# Interface Streamlit
uv run streamlit run src/gui/main.py --server.port 8501

# Tests
uv run python scripts/test_system.py

# Démonstration
uv run python src/gui/demo_production.py
```

### **Développement**
```bash
# Linting
uv run ruff check src
uv run black --check src

# Type checking
uv run mypy src/core

# Tests spécifiques
uv run pytest src/gui/tests/test_production_integration.py -v
```

## 📚 RESSOURCES

- **README principal** : `/Users/eagle/DevTools/sentinel2/README.md`
- **README GUI** : `/Users/eagle/DevTools/sentinel2/src/gui/README.md`
- **Règles complètes** : `/Users/eagle/DevTools/sentinel2/.cursor/rules`
- **Configuration** : `/Users/eagle/DevTools/sentinel2/.cursor/settings.json`

## 🎉 OBJECTIF

Maintenir un code de qualité professionnelle et maintenable, respectant les principes TDD et l'architecture modulaire, avec une interface Streamlit moderne et performante.

**Projet finalisé le** : 24 Septembre 2025  
**Version** : 2.0  
**Statut** : ✅ **PROJET FINALISÉ ET VALIDÉ**  
**Qualité** : 🏆 **EXCELLENTE**
