"""
Service de validation en temps r√©el des d√©cisions de trading
Valide les d√©cisions BUY/SELL contre l'√©volution des prix futurs
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Any
from loguru import logger
import sys
import json

# Ajouter le chemin src pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from constants import CONSTANTS

class DecisionValidationService:
    """Service de validation en temps r√©el des d√©cisions de trading"""
    
    def __init__(self):
        self.data_path = CONSTANTS.get_data_path()
        self.decisions_path = self.data_path / "trading" / "decisions_log"
        self.validation_path = self.data_path / "trading" / "validation_log"
        self.validation_path.mkdir(parents=True, exist_ok=True)
        
        # Fichier parquet pour l'historique des validations
        self.validation_file = self.validation_path / "decision_validation_history.parquet"
        
        logger.info("üîç Service de validation des d√©cisions initialis√©")
    
    def validate_decision(self, ticker: str, decision: str, fusion_score: float, 
                         current_price: float, timestamp: datetime) -> Dict[str, Any]:
        """
        Valide une d√©cision de trading en temps r√©el
        
        Args:
            ticker: Symbole de l'action
            decision: D√©cision prise (BUY/SELL/HOLD)
            fusion_score: Score de fusion utilis√©
            current_price: Prix actuel
            timestamp: Timestamp de la d√©cision
            
        Returns:
            Dict contenant les r√©sultats de validation
        """
        try:
            # Pour les d√©cisions HOLD, pas de validation n√©cessaire
            if decision.upper() == "HOLD":
                return {
                    "status": "hold",
                    "message": "D√©cision HOLD - Aucune validation n√©cessaire",
                    "accuracy": None,
                    "price_change": None,
                    "validation_time": None,
                    "is_correct": None
                }
            
            # Attendre un d√©lai pour avoir des donn√©es de prix futures
            # Pour la d√©monstration, on simule avec des donn√©es historiques
            validation_result = self._simulate_validation(ticker, decision, current_price, timestamp)
            
            # Sauvegarder la validation
            self._save_validation(ticker, decision, fusion_score, current_price, 
                                timestamp, validation_result)
            
            return validation_result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation d√©cision: {e}")
            return {
                "status": "error",
                "message": f"Erreur validation: {str(e)}",
                "accuracy": None,
                "price_change": None,
                "validation_time": None,
                "is_correct": None
            }
    
    def _simulate_validation(self, ticker: str, decision: str, current_price: float, 
                           timestamp: datetime) -> Dict[str, Any]:
        """
        Simule la validation en utilisant des donn√©es historiques
        En production, ceci serait remplac√© par une validation en temps r√©el
        """
        try:
            # Charger les donn√©es de prix pour simuler l'√©volution
            price_data = self._load_price_data(ticker)
            
            if price_data.empty:
                return {
                    "status": "no_data",
                    "message": "Donn√©es de prix indisponibles",
                    "accuracy": None,
                    "price_change": None,
                    "validation_time": None,
                    "is_correct": None
                }
            
            # Simuler l'√©volution du prix (dans un vrai syst√®me, on attendrait 15min)
            # Ici on utilise des donn√©es historiques pour la d√©monstration
            future_price = self._simulate_future_price(price_data, current_price, timestamp)
            
            # Calculer le changement de prix
            price_change = (future_price - current_price) / current_price * 100
            
            # D√©terminer si la d√©cision √©tait correcte
            is_correct = self._evaluate_decision_correctness(decision, price_change)
            
            # Calculer la pr√©cision
            accuracy = self._calculate_accuracy(decision, price_change)
            
            # D√©terminer le statut
            if accuracy >= 0.8:
                status = "‚úÖ Correct"
                message = f"Prix: ${current_price:.2f} ‚Üí ${future_price:.2f} ({price_change:+.2f}%)"
            elif accuracy >= 0.5:
                status = "‚ö†Ô∏è Partiellement correct"
                message = f"Prix: ${current_price:.2f} ‚Üí ${future_price:.2f} ({price_change:+.2f}%)"
            else:
                status = "‚ùå Incorrect"
                message = f"Prix: ${current_price:.2f} ‚Üí ${future_price:.2f} ({price_change:+.2f}%)"
            
            return {
                "status": status,
                "message": message,
                "accuracy": accuracy,
                "price_change": price_change,
                "validation_time": datetime.now(),
                "is_correct": is_correct,
                "current_price": current_price,
                "future_price": future_price
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur simulation validation: {e}")
            return {
                "status": "error",
                "message": f"Erreur simulation: {str(e)}",
                "accuracy": None,
                "price_change": None,
                "validation_time": None,
                "is_correct": None
            }
    
    def _load_price_data(self, ticker: str) -> pd.DataFrame:
        """Charge les donn√©es de prix pour la validation"""
        try:
            # Essayer de charger les donn√©es 15min d'abord
            price_file = self.data_path / "realtime" / "prices" / f"{ticker.lower()}_15min.parquet"
            
            if price_file.exists():
                df = pd.read_parquet(price_file)
                if 'ts_utc' in df.columns:
                    df['timestamp'] = pd.to_datetime(df['ts_utc'])
                elif 'timestamp' in df.columns:
                    df['timestamp'] = pd.to_datetime(df['timestamp'])
                return df
            
            # Fallback sur les donn√©es historiques
            hist_file = self.data_path / "historical" / "yfinance" / f"{ticker}_1999_2025.parquet"
            if hist_file.exists():
                df = pd.read_parquet(hist_file)
                if 'date' in df.columns:
                    df['timestamp'] = pd.to_datetime(df['date'])
                return df
            
            return pd.DataFrame()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur chargement donn√©es prix: {e}")
            return pd.DataFrame()
    
    def _simulate_future_price(self, price_data: pd.DataFrame, current_price: float, 
                              timestamp: datetime) -> float:
        """
        Simule l'√©volution du prix futur
        En production, ceci attendrait 15min et utiliserait les vrais prix
        """
        try:
            # Pour la d√©monstration, on simule une √©volution bas√©e sur l'historique
            if price_data.empty:
                # Si pas de donn√©es, simuler une √©volution al√©atoire
                volatility = 0.02  # 2% de volatilit√©
                change = np.random.normal(0, volatility)
                return current_price * (1 + change)
            
            # Utiliser l'historique pour simuler une √©volution r√©aliste
            recent_data = price_data.tail(100)  # 100 derniers points
            
            if len(recent_data) < 10:
                # Pas assez de donn√©es, simulation simple
                volatility = 0.01
                change = np.random.normal(0, volatility)
                return current_price * (1 + change)
            
            # Calculer la volatilit√© historique
            returns = recent_data['close'].pct_change().dropna()
            volatility = returns.std()
            
            # Simuler une √©volution bas√©e sur la volatilit√© historique
            change = np.random.normal(0, volatility)
            return current_price * (1 + change)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur simulation prix futur: {e}")
            # Fallback: simulation simple
            return current_price * (1 + np.random.normal(0, 0.01))
    
    def _evaluate_decision_correctness(self, decision: str, price_change: float) -> bool:
        """√âvalue si une d√©cision √©tait correcte bas√©e sur l'√©volution du prix"""
        if decision.upper() == "BUY":
            return price_change > 0.5  # BUY correct si prix monte de plus de 0.5%
        elif decision.upper() == "SELL":
            return price_change < -0.5  # SELL correct si prix baisse de plus de 0.5%
        else:
            return True  # HOLD toujours consid√©r√© comme correct
    
    def _calculate_accuracy(self, decision: str, price_change: float) -> float:
        """Calcule la pr√©cision d'une d√©cision"""
        if decision.upper() == "BUY":
            if price_change > 1.0:
                return 1.0  # Parfait
            elif price_change > 0.5:
                return 0.8  # Tr√®s bon
            elif price_change > 0:
                return 0.6  # Bon
            else:
                return 0.2  # Mauvais
        elif decision.upper() == "SELL":
            if price_change < -1.0:
                return 1.0  # Parfait
            elif price_change < -0.5:
                return 0.8  # Tr√®s bon
            elif price_change < 0:
                return 0.6  # Bon
            else:
                return 0.2  # Mauvais
        else:
            return 0.7  # HOLD neutre
    
    def _save_validation(self, ticker: str, decision: str, fusion_score: float, 
                        current_price: float, timestamp: datetime, 
                        validation_result: Dict[str, Any]):
        """Sauvegarde une validation dans le fichier parquet"""
        try:
            validation_data = {
                "timestamp": timestamp.isoformat(),
                "ticker": ticker,
                "decision": decision,
                "fusion_score": fusion_score,
                "current_price": current_price,
                "validation_time": validation_result.get("validation_time", datetime.now()).isoformat(),
                "accuracy": validation_result.get("accuracy"),
                "price_change": validation_result.get("price_change"),
                "is_correct": validation_result.get("is_correct"),
                "status": validation_result.get("status"),
                "message": validation_result.get("message")
            }
            
            # Charger l'historique existant
            if self.validation_file.exists():
                df = pd.read_parquet(self.validation_file)
            else:
                df = pd.DataFrame()
            
            # Ajouter la nouvelle validation
            new_row = pd.DataFrame([validation_data])
            df = pd.concat([df, new_row], ignore_index=True)
            
            # Sauvegarder
            df.to_parquet(self.validation_file, index=False)
            logger.info(f"‚úÖ Validation sauvegard√©e: {ticker} - {decision} - {validation_result.get('status')}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur sauvegarde validation: {e}")
    
    def get_validation_history(self, ticker: str, days: int = 7) -> pd.DataFrame:
        """R√©cup√®re l'historique des validations pour un ticker"""
        try:
            if not self.validation_file.exists():
                return pd.DataFrame()
            
            df = pd.read_parquet(self.validation_file)
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            
            # Filtrer par ticker et p√©riode
            cutoff_date = datetime.now() - timedelta(days=days)
            filtered_df = df[
                (df['ticker'] == ticker) & 
                (df['timestamp'] >= cutoff_date)
            ].sort_values('timestamp')
            
            return filtered_df
            
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration historique validation: {e}")
            return pd.DataFrame()
    
    def get_validation_stats(self, ticker: str, days: int = 7) -> Dict[str, Any]:
        """Calcule les statistiques de validation pour un ticker"""
        try:
            df = self.get_validation_history(ticker, days)
            
            if df.empty:
                return {
                    "total_decisions": 0,
                    "total_validations": 0,
                    "correct_decisions": 0,
                    "accuracy_rate": 0.0,
                    "average_accuracy": 0.0,
                    "buy_decisions": 0,
                    "sell_decisions": 0,
                    "hold_decisions": 0,
                    "buy_accuracy": 0.0,
                    "sell_accuracy": 0.0
                }
            
            # Statistiques g√©n√©rales
            total_decisions = len(df)
            total_validations = len(df[df['is_correct'].notna()])
            correct_decisions = len(df[df['is_correct'] == True])
            accuracy_rate = correct_decisions / total_validations if total_validations > 0 else 0.0
            average_accuracy = df['accuracy'].mean() if 'accuracy' in df.columns else 0.0
            
            # Statistiques par type de d√©cision
            buy_decisions = len(df[df['decision'] == 'BUY'])
            sell_decisions = len(df[df['decision'] == 'SELL'])
            hold_decisions = len(df[df['decision'] == 'HOLD'])
            
            buy_accuracy = df[df['decision'] == 'BUY']['accuracy'].mean() if buy_decisions > 0 else 0.0
            sell_accuracy = df[df['decision'] == 'SELL']['accuracy'].mean() if sell_decisions > 0 else 0.0
            
            return {
                "total_decisions": total_decisions,
                "total_validations": total_validations,
                "correct_decisions": correct_decisions,
                "accuracy_rate": round(accuracy_rate, 3),
                "average_accuracy": round(average_accuracy, 3),
                "buy_decisions": buy_decisions,
                "sell_decisions": sell_decisions,
                "hold_decisions": hold_decisions,
                "buy_accuracy": round(buy_accuracy, 3),
                "sell_accuracy": round(sell_accuracy, 3)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur calcul statistiques validation: {e}")
            return {
                "total_decisions": 0,
                "total_validations": 0,
                "correct_decisions": 0,
                "accuracy_rate": 0.0,
                "average_accuracy": 0.0,
                "buy_decisions": 0,
                "sell_decisions": 0,
                "hold_decisions": 0,
                "buy_accuracy": 0.0,
                "sell_accuracy": 0.0
            }
    
    def get_adaptive_threshold_performance(self, ticker: str, days: int = 7) -> Dict[str, Any]:
        """Analyse la performance des seuils adaptatifs"""
        try:
            df = self.get_validation_history(ticker, days)
            
            if df.empty:
                return {
                    "threshold_analysis": "Aucune donn√©e disponible",
                    "recommended_adjustments": [],
                    "performance_score": 0.0
                }
            
            # Analyser les d√©cisions par seuil de fusion
            if 'fusion_score' in df.columns:
                # Grouper par plages de fusion_score
                df['fusion_range'] = pd.cut(df['fusion_score'], 
                                          bins=[-np.inf, -0.1, -0.05, 0.05, 0.1, np.inf],
                                          labels=['Very Negative', 'Negative', 'Neutral', 'Positive', 'Very Positive'])
                
                performance_by_range = df.groupby('fusion_range').agg({
                    'is_correct': ['count', 'sum', 'mean'],
                    'accuracy': 'mean'
                }).round(3)
                
                # Recommandations d'ajustement
                recommendations = []
                if performance_by_range.loc['Positive', ('is_correct', 'mean')] < 0.6:
                    recommendations.append("Consid√©rer augmenter le seuil BUY")
                if performance_by_range.loc['Negative', ('is_correct', 'mean')] < 0.6:
                    recommendations.append("Consid√©rer diminuer le seuil SELL")
                
                performance_score = df['accuracy'].mean() if 'accuracy' in df.columns else 0.0
                
                return {
                    "threshold_analysis": performance_by_range.to_dict(),
                    "recommended_adjustments": recommendations,
                    "performance_score": round(performance_score, 3)
                }
            else:
                return {
                    "threshold_analysis": "Donn√©es de fusion_score manquantes",
                    "recommended_adjustments": [],
                    "performance_score": 0.0
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse performance seuils: {e}")
            return {
                "threshold_analysis": f"Erreur: {str(e)}",
                "recommended_adjustments": [],
                "performance_score": 0.0
            }

