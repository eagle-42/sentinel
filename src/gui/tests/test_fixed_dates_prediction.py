#!/usr/bin/env python3
"""
Test de g√©n√©ration du graphique de pr√©diction avec dates corrig√©es
V√©rification que les dates s'affichent correctement sur l'axe horizontal
"""

import sys
from pathlib import Path
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Ajouter le path pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

from src.gui.services.data_service import DataService
from src.gui.services.chart_service import ChartService
from src.gui.services.prediction_service import PredictionService

def test_prediction_chart_with_fixed_dates():
    """Test du graphique de pr√©diction avec dates corrig√©es"""
    
    print("üß™ Test du graphique de pr√©diction avec dates corrig√©es")
    print("=" * 60)
    
    # Initialisation des services
    data_service = DataService()
    chart_service = ChartService()
    prediction_service = PredictionService()
    
    # Chargement des donn√©es SPY
    print("üìä Chargement des donn√©es SPY...")
    df = data_service.load_data("SPY")
    
    if df.empty:
        print("‚ùå Aucune donn√©e SPY disponible")
        return
    
    print(f"‚úÖ Donn√©es charg√©es: {len(df)} lignes")
    print(f"üìÖ P√©riode: {df['DATE'].min()} √† {df['DATE'].max()}")
    
    # Filtrage sur 1 mois
    print("\nüîç Filtrage sur 1 mois...")
    df_filtered = data_service.filter_by_period(df, "1 mois")
    print(f"‚úÖ Donn√©es filtr√©es: {len(df_filtered)} lignes")
    
    # G√©n√©ration des pr√©dictions
    print("\nüîÆ G√©n√©ration des pr√©dictions LSTM...")
    prediction_data = prediction_service.predict(df_filtered, 20)
    
    if not prediction_data['predictions']:
        print("‚ùå Aucune pr√©diction g√©n√©r√©e")
        return
    
    print(f"‚úÖ Pr√©dictions g√©n√©r√©es: {len(prediction_data['predictions'])} points")
    print(f"üìÖ Dates futures: {prediction_data['prediction_dates'][0]} √† {prediction_data['prediction_dates'][-1]}")
    
    # Cr√©ation du graphique
    print("\nüìà Cr√©ation du graphique...")
    fig = chart_service.create_prediction_chart(
        df_filtered, 
        prediction_data, 
        "SPY", 
        "1 mois"
    )
    
    # V√©rification de la configuration des dates
    print("\nüîç V√©rification de la configuration des dates...")
    xaxis_config = fig.layout.xaxis
    
    print(f"‚úÖ Type d'axe: {xaxis_config.type}")
    print(f"‚úÖ Format des ticks: {xaxis_config.tickformat}")
    print(f"‚úÖ Angle des ticks: {xaxis_config.tickangle}")
    print(f"‚úÖ Intervalle des ticks: {xaxis_config.dtick}")
    
    # Sauvegarde du graphique
    output_path = Path(__file__).parent / "spy_fixed_dates_prediction.png"
    fig.write_image(str(output_path), width=1200, height=700, scale=2)
    
    print(f"\nüíæ Graphique sauvegard√©: {output_path}")
    print("‚úÖ Test termin√© avec succ√®s!")
    
    # Affichage des m√©triques
    if 'historical_predictions' in prediction_data and prediction_data['historical_predictions']:
        hist_preds = prediction_data['historical_predictions']
        real_prices = df_filtered['CLOSE'].values
        
        mae_hist = np.mean(np.abs(np.array(hist_preds) - real_prices))
        mape_hist = np.mean(np.abs((np.array(hist_preds) - real_prices) / real_prices)) * 100
        correlation_hist = np.corrcoef(hist_preds, real_prices)[0, 1]
        
        print(f"\nüìä M√âTRIQUES HISTORIQUES:")
        print(f"‚Ä¢ Erreur Moyenne: {mae_hist:.2f}$")
        print(f"‚Ä¢ Erreur Relative: {mape_hist:.1f}%")
        print(f"‚Ä¢ Corr√©lation: {correlation_hist:.3f}")
    
    if 'predictions' in prediction_data and prediction_data['predictions']:
        future_preds = prediction_data['predictions']
        last_real_price = df_filtered['CLOSE'].iloc[-1]
        
        price_change = (future_preds[-1] - last_real_price) / last_real_price * 100
        volatility_future = np.std(np.diff(future_preds)) / np.mean(future_preds) * 100
        
        print(f"\nüîÆ M√âTRIQUES FUTURES:")
        print(f"‚Ä¢ Prix initial: ${last_real_price:.2f}")
        print(f"‚Ä¢ Prix final pr√©dit: ${future_preds[-1]:.2f}")
        print(f"‚Ä¢ Variation attendue: {price_change:+.1f}%")
        print(f"‚Ä¢ Volatilit√© pr√©dite: {volatility_future:.1f}%")

if __name__ == "__main__":
    test_prediction_chart_with_fixed_dates()
