#!/usr/bin/env python3
"""
üîÑ Script de mise √† jour des donn√©es de prix
Met √† jour les donn√©es de prix depuis Yahoo Finance
"""

import os
import sys
from datetime import datetime, timedelta
from pathlib import Path

import pandas as pd
import yfinance as yf
from loguru import logger

# Ajouter src au path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))


def refresh_price_data():
    """Met √† jour les donn√©es de prix pour SPY et NVDA"""
    try:
        logger.info("üîÑ D√©but de la mise √† jour des donn√©es de prix")

        # Tickers √† mettre √† jour
        tickers = ["SPY", "NVDA"]

        for ticker in tickers:
            logger.info(f"üìà Mise √† jour de {ticker}")

            # R√©cup√©rer les donn√©es depuis Yahoo Finance
            ticker_obj = yf.Ticker(ticker)
            data = ticker_obj.history(period="1y", interval="1d")

            if data.empty:
                logger.warning(f"‚ö†Ô∏è Aucune donn√©e pour {ticker}")
                continue

            # Normaliser les donn√©es
            data = data.reset_index()
            data["ticker"] = ticker
            data = data.rename(columns={"Datetime": "date"})

            # Sauvegarder les donn√©es
            output_file = Path(f"data/historical/yfinance/{ticker}_1999_2025.parquet")
            output_file.parent.mkdir(parents=True, exist_ok=True)

            data.to_parquet(output_file, index=False)
            logger.info(f"‚úÖ {ticker} sauvegard√©: {len(data)} lignes")
            logger.info(f"   Derni√®re date: {data['date'].iloc[-1]}")

        logger.info("‚úÖ Mise √† jour termin√©e")
        return True

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la mise √† jour: {e}")
        return False


if __name__ == "__main__":
    success = refresh_price_data()
    sys.exit(0 if success else 1)
