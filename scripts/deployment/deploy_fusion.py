from config.project_config import DATA_DIR, FEATURES_DIR, MODELS_DIR, PROJECT_ROOT, YFINANCE_DIR
from config.unified_config import get_config, get_data_file_path, get_model_path

#!/usr/bin/env python3
"""
Script de d√©ploiement pour la fusion adaptative
Phase: Infrastructure - Int√©gration - Calibration
"""

import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import json
import logging
import shutil
from datetime import datetime
from pathlib import Path

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AdaptiveFusionDeployer:
    """D√©ployeur pour le syst√®me de fusion adaptative"""

    def __init__(self, base_path: str = "PROJECT_ROOT"):
        self.base_path = Path(base_path)
        self.deployment_log = []

    def log_step(self, step: str, status: str, details: str = ""):
        """Enregistre une √©tape du d√©ploiement"""
        log_entry = {"timestamp": datetime.now().isoformat(), "step": step, "status": status, "details": details}
        self.deployment_log.append(log_entry)
        logger.info(f"[{status.upper()}] {step}: {details}")

    def create_directory_structure(self):
        """Cr√©e la structure de r√©pertoires n√©cessaire"""
        self.log_step("Cr√©ation structure r√©pertoires", "start", "Cr√©ation des r√©pertoires pour la fusion adaptative")

        directories = [
            "PREDICTIONS_DIR/nvda",
            "PREDICTIONS_DIR/spy",
            "data/trading/adaptive_fusion",
            "data/trading/calibration",
            "logs/adaptive_fusion",
            "config/adaptive_fusion",
        ]

        for directory in directories:
            dir_path = self.base_path / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            self.log_step(f"R√©pertoire {directory}", "created", str(dir_path))

        self.log_step("Cr√©ation structure r√©pertoires", "completed", f"{len(directories)} r√©pertoires cr√©√©s")

    def create_config_files(self):
        """Cr√©e les fichiers de configuration"""
        self.log_step("Cr√©ation fichiers config", "start", "Cr√©ation des fichiers de configuration")

        # Configuration par d√©faut de la fusion adaptative
        default_config = {
            "fusion_config": {
                "lookback_window": 100,
                "min_samples": 50,
                "min_correlation": 0.1,
                "max_correlation": 0.9,
                "base_price_weight": 0.6,
                "base_sentiment_weight": 0.4,
                "low_volatility_threshold": 0.02,
                "high_volatility_threshold": 0.05,
                "low_volume_threshold": 0.8,
                "high_volume_threshold": 1.2,
                "regularization_factor": 0.1,
                "max_weight_change": 0.2,
            },
            "price_predictor": {"base_path": "PREDICTIONS_DIR", "auto_load_models": True, "model_validation": True},
            "calibration": {
                "walk_forward_months": 6,
                "test_months": 1,
                "optimization_metric": "composite_score",
                "max_iterations": 1000,
            },
            "gui": {"default_fusion_mode": "fixed", "auto_refresh_interval": 5, "show_debug_info": True},
        }

        config_file = self.base_path / "config/adaptive_fusion/config.json"
        with open(config_file, "w") as f:
            json.dump(default_config, f, indent=2)

        self.log_step("Configuration par d√©faut", "created", str(config_file))

        # Configuration des mod√®les de pr√©diction
        model_config = {
            "nvda": {"enabled": True, "version": "latest", "auto_update": True, "confidence_threshold": 0.7},
            "spy": {"enabled": True, "version": "latest", "auto_update": True, "confidence_threshold": 0.7},
        }

        model_config_file = self.base_path / "config/adaptive_fusion/models.json"
        with open(model_config_file, "w") as f:
            json.dump(model_config, f, indent=2)

        self.log_step("Configuration mod√®les", "created", str(model_config_file))

        self.log_step("Cr√©ation fichiers config", "completed", "Fichiers de configuration cr√©√©s")

    def create_deployment_scripts(self):
        """Cr√©e les scripts de d√©ploiement et de maintenance"""
        self.log_step("Cr√©ation scripts d√©ploiement", "start", "Cr√©ation des scripts de d√©ploiement")

        # Script de d√©marrage
        startup_script = """#!/bin/bash
# Script de d√©marrage pour la fusion adaptative

echo "üöÄ D√©marrage du syst√®me de fusion adaptative..."

# V√©rifier les d√©pendances
python -c "import torch, pandas, numpy, scipy" || {
    echo "‚ùå D√©pendances manquantes. Installez avec: pip install torch pandas numpy scipy"
    exit 1
}

# Cr√©er les r√©pertoires si n√©cessaire
mkdir -p PREDICTIONS_DIR/{nvda,spy}
mkdir -p data/trading/adaptive_fusion
mkdir -p logs/adaptive_fusion

# D√©marrer les services
echo "üìä D√©marrage des services de fusion adaptative..."
python scripts/test_fusion_simple.py

echo "‚úÖ Syst√®me de fusion adaptative d√©marr√©!"
"""

        startup_file = self.base_path / "scripts/start_adaptive_fusion.sh"
        with open(startup_file, "w") as f:
            f.write(startup_script)
        startup_file.chmod(0o755)

        self.log_step("Script de d√©marrage", "created", str(startup_file))

        # Script de test
        test_script = """#!/bin/bash
# Script de test pour la fusion adaptative

echo "üß™ Tests du syst√®me de fusion adaptative..."

# Test des composants de base
python scripts/test_fusion_simple.py

# Test de l'interface GUI (optionnel)
if [ "$1" = "--gui" ]; then
    echo "üñ•Ô∏è  D√©marrage de l'interface GUI..."
    python scripts/gui_fusion_test.py
fi

echo "‚úÖ Tests termin√©s!"
"""

        test_file = self.base_path / "scripts/test_adaptive_fusion_system.sh"
        with open(test_file, "w") as f:
            f.write(test_script)
        test_file.chmod(0o755)

        self.log_step("Script de test", "created", str(test_file))

        # Script de calibration
        calibration_script = """#!/bin/bash
# Script de calibration pour la fusion adaptative

echo "üéØ D√©marrage de la calibration de la fusion adaptative..."

# V√©rifier la pr√©sence des donn√©es
if [ ! -f "data/dataset/3-kagglefull/nvda_15min_2014_2025.parquet" ]; then
    echo "‚ùå Donn√©es NVDA manquantes. Veuillez les t√©l√©charger d'abord."
    exit 1
fi

if [ ! -f "data/dataset/3-kagglefull/spy_15min_2014_2024.parquet" ]; then
    echo "‚ùå Donn√©es SPY manquantes. Veuillez les t√©l√©charger d'abord."
    exit 1
fi

# Lancer la calibration
python scripts/calibrate_adaptive_fusion.py

echo "‚úÖ Calibration termin√©e!"
"""

        calibration_file = self.base_path / "scripts/calibrate_adaptive_fusion_system.sh"
        with open(calibration_file, "w") as f:
            f.write(calibration_script)
        calibration_file.chmod(0o755)

        self.log_step("Script de calibration", "created", str(calibration_file))

        self.log_step("Cr√©ation scripts d√©ploiement", "completed", "Scripts de d√©ploiement cr√©√©s")

    def create_documentation(self):
        """Cr√©e la documentation du syst√®me"""
        self.log_step("Cr√©ation documentation", "start", "Cr√©ation de la documentation")

        # README pour la fusion adaptative
        readme_content = """# Syst√®me de Fusion Adaptative

## Vue d'ensemble

Le syst√®me de fusion adaptative combine intelligemment les signaux de prix et de sentiment pour prendre des d√©cisions de trading optimis√©es. Il s'adapte dynamiquement aux conditions de march√© en ajustant les poids des signaux.

## Fonctionnalit√©s

### üîÑ Fusion Adaptative
- **D√©tection de r√©gime de march√©** : Volatilit√©, volume, tendance
- **Ajustement dynamique des poids** : Prix vs Sentiment
- **Normalisation des signaux** : Z-scores et statistiques glissantes
- **R√©gularisation** : √âvite l'overfitting

### üîß Fusion Fixe
- **Logique traditionnelle** : R√®gles fixes bas√©es sur sentiment et prix
- **Compatibilit√©** : Maintient la logique existante
- **Comparaison** : Permet de comparer avec la fusion adaptative

### üìä Price Predictor
- **Chargement automatique** : R√©cup√®re les mod√®les depuis `PREDICTIONS_DIR`
- **Support multi-tickers** : NVDA, SPY, etc.
- **Validation** : V√©rifie l'int√©grit√© des mod√®les

## Structure

```
src/
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îú‚îÄ‚îÄ adaptive_fusion.py      # Syst√®me de fusion adaptative
‚îÇ   ‚îú‚îÄ‚îÄ rolling_stats.py        # Statistiques glissantes
‚îÇ   ‚îî‚îÄ‚îÄ sentiment_window.py     # Analyse de sentiment √©tendue
‚îú‚îÄ‚îÄ models/predictions/
‚îÇ   ‚îî‚îÄ‚îÄ price_predictor.py      # Pr√©dicteur de prix
‚îî‚îÄ‚îÄ pipeline/
    ‚îî‚îÄ‚îÄ decision_flow.py        # Flux de d√©cision mis √† jour
```

## Utilisation

### Test Simple
```bash
python scripts/test_fusion_simple.py
```

### Interface GUI
```bash
python scripts/gui_fusion_test.py
```

### Calibration
```bash
python scripts/calibrate_adaptive_fusion_system.sh
```

## Configuration

Les param√®tres sont dans `config/adaptive_fusion/config.json` :

- `lookback_window` : Fen√™tre de lookback (d√©faut: 100)
- `base_price_weight` : Poids de base pour le prix (d√©faut: 0.6)
- `base_sentiment_weight` : Poids de base pour le sentiment (d√©faut: 0.4)
- `min_correlation` : Corr√©lation minimum (d√©faut: 0.1)
- `max_correlation` : Corr√©lation maximum (d√©faut: 0.9)

## Modes de Fusion

### Mode Fixe
- Logique traditionnelle
- R√®gles bas√©es sur des seuils fixes
- Compatible avec l'existant

### Mode Adaptatif
- Ajustement dynamique des poids
- D√©tection de r√©gime de march√©
- Normalisation des signaux
- R√©gularisation

## M√©triques

- **Accuracy** : Pr√©cision des d√©cisions
- **Sharpe Ratio** : Rendement ajust√© du risque
- **Max Drawdown** : Perte maximale
- **Volatilit√©** : √âcart-type des retours

## D√©ploiement

1. **Infrastructure** : Cr√©ation des r√©pertoires et configurations
2. **Int√©gration** : Tests et validation des composants
3. **Calibration** : Optimisation des param√®tres avec walk-forward

## Support

Pour toute question ou probl√®me, consultez les logs dans `logs/adaptive_fusion/`.
"""

        readme_file = self.base_path / "src/features/README_ADAPTIVE_FUSION.md"
        with open(readme_file, "w") as f:
            f.write(readme_content)

        self.log_step("Documentation", "created", str(readme_file))

        self.log_step("Cr√©ation documentation", "completed", "Documentation cr√©√©e")

    def validate_deployment(self):
        """Valide le d√©ploiement"""
        self.log_step("Validation d√©ploiement", "start", "Validation du d√©ploiement")

        # V√©rifier les fichiers cr√©√©s
        required_files = [
            "src/features/adaptive_fusion.py",
            "src/features/rolling_stats.py",
            "src/models/predictions/price_predictor.py",
            "scripts/test_fusion_simple.py",
            "scripts/gui_fusion_test.py",
            "scripts/calibrate_adaptive_fusion.py",
            "config/adaptive_fusion/config.json",
        ]

        missing_files = []
        for file_path in required_files:
            if not (self.base_path / file_path).exists():
                missing_files.append(file_path)

        if missing_files:
            self.log_step("Validation d√©ploiement", "failed", f"Fichiers manquants: {missing_files}")
            return False

        # Tester l'import des modules
        try:
            import sys

            sys.path.append(str(self.base_path))

            from src.core.adaptive_fusion.fusion_engine import AdaptiveFusion, FusionMode
            from src.core.adaptive_fusion.rolling_stats import RollingStats
            from src.core.price_predictor.predictor import PricePredictor

            self.log_step("Import modules", "success", "Tous les modules s'importent correctement")

        except Exception as e:
            self.log_step("Import modules", "failed", f"Erreur d'import: {e}")
            return False

        self.log_step("Validation d√©ploiement", "completed", "D√©ploiement valid√© avec succ√®s")
        return True

    def save_deployment_log(self):
        """Sauvegarde le log de d√©ploiement"""
        log_file = self.base_path / "logs/adaptive_fusion/deployment_log.json"
        log_file.parent.mkdir(parents=True, exist_ok=True)

        with open(log_file, "w") as f:
            json.dump(self.deployment_log, f, indent=2)

        self.log_step("Sauvegarde log", "completed", f"Log sauvegard√© dans {log_file}")

    def deploy(self):
        """Lance le d√©ploiement complet"""
        print("üöÄ D√©marrage du d√©ploiement de la fusion adaptative...")
        print("=" * 60)

        try:
            # √âtape 1: Structure de r√©pertoires
            self.create_directory_structure()

            # √âtape 2: Fichiers de configuration
            self.create_config_files()

            # √âtape 3: Scripts de d√©ploiement
            self.create_deployment_scripts()

            # √âtape 4: Documentation
            self.create_documentation()

            # √âtape 5: Validation
            if self.validate_deployment():
                print("\n‚úÖ D√©ploiement termin√© avec succ√®s!")
                print("\nüìã Prochaines √©tapes:")
                print("   1. Tester le syst√®me: python scripts/test_fusion_simple.py")
                print("   2. Lancer l'interface GUI: python scripts/gui_fusion_test.py")
                print("   3. Calibrer les param√®tres: python scripts/calibrate_adaptive_fusion_system.sh")
                print("   4. Int√©grer dans le flux principal: Modifier decision_flow.py")
            else:
                print("\n‚ùå D√©ploiement √©chou√©. V√©rifiez les logs.")

            # Sauvegarder le log
            self.save_deployment_log()

        except Exception as e:
            self.log_step("D√©ploiement", "failed", f"Erreur: {e}")
            print(f"\n‚ùå Erreur lors du d√©ploiement: {e}")
            import traceback

            traceback.print_exc()


def main():
    """Fonction principale"""
    deployer = AdaptiveFusionDeployer()
    deployer.deploy()


if __name__ == "__main__":
    main()
