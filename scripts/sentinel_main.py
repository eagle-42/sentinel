#!/usr/bin/env python3
"""
üöÄ Script principal Sentinel2
Orchestre le syst√®me de trading complet avec refresh automatique des donn√©es
"""

import os
import signal
import sys
import threading
import time
from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Any, Dict

import schedule
from loguru import logger

# Ajouter src au path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from src.config import config
from src.constants import CONSTANTS


class SentinelMain:
    """Orchestrateur principal du syst√®me Sentinel2"""

    def __init__(self):
        self.running = False
        self.threads = []

        # Configuration des intervalles
        self.price_interval = 15 * 60  # 15 minutes
        self.news_interval = 4 * 60  # 4 minutes
        self.trading_interval = 15 * 60  # 15 minutes

        # Importer les modules de refresh
        self.price_refresher = None
        self.news_refresher = None
        self.trading_pipeline = None

        self._load_modules()

    def _load_modules(self):
        """Charge les modules de refresh"""
        try:
            from scripts.refresh_news import NewsRefresher
            from scripts.refresh_prices import PriceRefresher
            from scripts.trading_pipeline import TradingPipeline

            self.price_refresher = PriceRefresher()
            self.news_refresher = NewsRefresher()
            self.trading_pipeline = TradingPipeline()

            logger.info("‚úÖ Modules de refresh charg√©s avec succ√®s")

        except Exception as e:
            logger.error(f"‚ùå Erreur chargement modules: {e}")
            raise

    def refresh_prices_job(self):
        """Job de refresh des prix"""
        try:
            logger.info("üîÑ D√©marrage refresh des prix")
            state = self.price_refresher.refresh_all_prices()
            logger.info("‚úÖ Refresh des prix termin√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur refresh prix: {e}")

    def refresh_news_job(self):
        """Job de refresh des news"""
        try:
            logger.info("üì∞ D√©marrage refresh des news")
            state = self.news_refresher.refresh_news_and_sentiment()
            logger.info("‚úÖ Refresh des news termin√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur refresh news: {e}")

    def trading_pipeline_job(self):
        """Job de pipeline de trading"""
        try:
            logger.info("ü§ñ D√©marrage pipeline de trading")
            result = self.trading_pipeline.run_trading_pipeline()
            logger.info("‚úÖ Pipeline de trading termin√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur pipeline trading: {e}")

    def validation_job(self):
        """Job de validation des d√©cisions en attente"""
        try:
            logger.info("üîç D√©marrage validation des d√©cisions en attente")

            # Importer le service de validation
            from src.gui.services.decision_validation_service import DecisionValidationService

            validation_service = DecisionValidationService()

            # Traiter les validations en attente
            processed_count = validation_service.process_pending_validations()

            if processed_count > 0:
                logger.info(f"‚úÖ {processed_count} validations trait√©es")
            else:
                logger.debug("‚ÑπÔ∏è Aucune validation en attente")

        except Exception as e:
            logger.error(f"‚ùå Erreur validation: {e}")

    def setup_schedule(self):
        """Configure la planification des t√¢ches"""
        # Refresh des prix toutes les 15 minutes
        schedule.every(15).minutes.do(self.refresh_prices_job)

        # Refresh des news toutes les 4 minutes
        schedule.every(4).minutes.do(self.refresh_news_job)

        # Pipeline de trading toutes les 15 minutes
        schedule.every(15).minutes.do(self.trading_pipeline_job)

        # Validation des d√©cisions en attente toutes les 5 minutes
        schedule.every(5).minutes.do(self.validation_job)

        logger.info("üìÖ Planification configur√©e:")
        logger.info("   - Prix: toutes les 15 minutes")
        logger.info("   - News: toutes les 4 minutes")
        logger.info("   - Trading: toutes les 15 minutes")
        logger.info("   - Validation: toutes les 5 minutes")

    def run_initial_refresh(self):
        """Ex√©cute un refresh initial de toutes les donn√©es"""
        logger.info("üöÄ === REFRESH INITIAL ===")

        try:
            # Refresh des prix
            logger.info("1. Refresh des prix...")
            self.refresh_prices_job()

            # Refresh des news
            logger.info("2. Refresh des news...")
            self.refresh_news_job()

            # NE PAS ex√©cuter le pipeline de trading au d√©marrage
            # Il sera ex√©cut√© selon les fen√™tres fixes de 15 minutes
            logger.info("3. Pipeline de trading... (attente fen√™tre 15min)")

            logger.info("‚úÖ Refresh initial termin√©")

        except Exception as e:
            logger.error(f"‚ùå Erreur refresh initial: {e}")
            raise

    def run_scheduler(self):
        """Ex√©cute le planificateur principal"""
        logger.info("‚è∞ D√©marrage du planificateur")

        while self.running:
            try:
                schedule.run_pending()
                time.sleep(1)  # V√©rifier toutes les secondes
            except Exception as e:
                logger.error(f"‚ùå Erreur planificateur: {e}")
                time.sleep(5)  # Attendre 5 secondes avant de r√©essayer

    def signal_handler(self, signum, frame):
        """Gestionnaire de signaux pour arr√™t propre"""
        logger.info(f"üõë Signal re√ßu: {signum}")
        self.running = False

    def start(self):
        """D√©marre le syst√®me Sentinel2"""
        logger.info("üöÄ === D√âMARRAGE SENTINEL2 ===")

        # Configuration des signaux
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)

        try:
            # Refresh initial
            self.run_initial_refresh()

            # Configuration de la planification
            self.setup_schedule()

            # D√©marrage du planificateur
            self.running = True
            self.run_scheduler()

        except KeyboardInterrupt:
            logger.info("üõë Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            logger.error(f"‚ùå Erreur fatale: {e}")
        finally:
            self.stop()

    def stop(self):
        """Arr√™te le syst√®me Sentinel2"""
        logger.info("üõë === ARR√äT SENTINEL2 ===")

        self.running = False

        # Attendre que les threads se terminent
        for thread in self.threads:
            if thread.is_alive():
                thread.join(timeout=5)

        logger.info("‚úÖ Arr√™t termin√©")

    def run_once(self):
        """Ex√©cute une seule fois toutes les t√¢ches"""
        logger.info("üîÑ === EX√âCUTION UNIQUE ===")

        try:
            self.run_initial_refresh()
            logger.info("‚úÖ Ex√©cution unique termin√©e")
            return 0
        except Exception as e:
            logger.error(f"‚ùå Erreur ex√©cution unique: {e}")
            return 1


def main():
    """Fonction principale"""
    import argparse

    parser = argparse.ArgumentParser(description="Syst√®me de trading Sentinel2")
    parser.add_argument(
        "--mode",
        choices=["daemon", "once"],
        default="daemon",
        help="Mode d'ex√©cution: daemon (continu) ou once (une fois)",
    )
    parser.add_argument(
        "--log-level", choices=["DEBUG", "INFO", "WARNING", "ERROR"], default="INFO", help="Niveau de log"
    )

    args = parser.parse_args()

    # Configuration des logs
    logger.remove()
    logger.add(
        sys.stderr,
        level=args.log_level,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    )

    # Ajouter un fichier de log
    log_file = CONSTANTS.DATA_ROOT / "logs" / "sentinel_main.log"
    log_file.parent.mkdir(parents=True, exist_ok=True)

    logger.add(
        log_file,
        level="DEBUG",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
        rotation="1 day",
        retention="7 days",
    )

    try:
        sentinel = SentinelMain()

        if args.mode == "daemon":
            logger.info("üöÄ Mode daemon - D√©marrage continu")
            sentinel.start()
        else:
            logger.info("üîÑ Mode once - Ex√©cution unique")
            exit_code = sentinel.run_once()
            sys.exit(exit_code)

    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
